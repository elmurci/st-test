diff --git a/node_modules/did-jwt/lib/index.module.js b/node_modules/did-jwt/lib/index.module.js
index a4f395f..76999f6 100644
--- a/node_modules/did-jwt/lib/index.module.js
+++ b/node_modules/did-jwt/lib/index.module.js
@@ -1977,6 +1977,7 @@ const createJWT = function (payload, {
   canonicalize
 }, header = {}) {
   try {
+    console.log('[createJWT] *************** (1)', payload, issuer, alg, signer, expiresIn, canonicalize);
     if (!signer) throw new Error('missing_signer: No Signer functionality has been configured');
     if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured');
     if (!header.typ) header.typ = 'JWT';
@@ -1998,6 +1999,7 @@ const createJWT = function (payload, {
       ...payload,
       iss: issuer
     };
+    console.log('[createJWT] *************** (2)', fullPayload);
     return createJWS(fullPayload, signer, header, {
       canonicalize
     });
@@ -2023,12 +2025,18 @@ const createJWT = function (payload, {
 const createJWS = function (payload, signer, header = {}, options = {}) {
   try {
     if (!header.alg) header.alg = defaultAlg;
+    console.log('[createJWS] *************** (header)', header);
+    console.log('[createJWS] *************** (payload)', payload);
+    console.log('[createJWS] *************** (options)', options);
     const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize);
     const signingInput = [encodeSection(header, options.canonicalize), encodedPayload].join('.');
+    console.log('[createJWS] *************** (2)', encodeSection(header, options.canonicalize), "***", encodedPayload);
     const jwtSigner = SignerAlg(header.alg);
+    console.log('[createJWS] *************** (3)', jwtSigner);
     return Promise.resolve(jwtSigner(signingInput, signer)).then(function (signature) {
       // JWS Compact Serialization
       // https://www.rfc-editor.org/rfc/rfc7515#section-7.1
+      console.log('[createJWS] *************** (4)', signingInput);
       return [signingInput, signature].join('.');
     });
   } catch (e) {
@@ -2043,7 +2051,9 @@ const defaultAlg = 'ES256K';
 const DID_JSON = 'application/did+json'; // eslint-disable-next-line @typescript-eslint/no-explicit-any
 
 function encodeSection(data, shouldCanonicalize = false) {
+  console.log('[encodeSection] *************** (shouldCanonicalize)', shouldCanonicalize, data, JSON.stringify(data));
   if (shouldCanonicalize) {
+    console.log('[encodeSection] *************** (canonicalizeData)', canonicalizeData(data));
     return encodeBase64url(canonicalizeData(data));
   } else {
     return encodeBase64url(JSON.stringify(data));
