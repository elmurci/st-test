diff --git a/node_modules/did-jwt/lib/index.module.js b/node_modules/did-jwt/lib/index.module.js
index a4f395f..9a80312 100644
--- a/node_modules/did-jwt/lib/index.module.js
+++ b/node_modules/did-jwt/lib/index.module.js
@@ -18,7 +18,13 @@ const u8a = {
   fromString,
   concat
 };
+
+console.log("[uint8arrays] toString", u8a.toString);
 function bytesToBase64url(b) {
+  console.log("[bytesToBase64url] debug", typeof b, JSON.stringify(b));
+  console.log("[bytesToBase64url] toString", u8a.toString(b, 'base64url'));
+  console.log("[bytesToBase64url] toString Stringified", JSON.stringify(u8a.toString(b, 'base64url')));
+  console.log('[bytesToBase64url] encoding', b, JSON.stringify(b));
   return u8a.toString(b, 'base64url');
 }
 function base64ToBytes(s) {
@@ -253,6 +259,9 @@ function hexToBytes(s, minLength) {
   return u8a.fromString(input.toLowerCase(), 'base16');
 }
 function encodeBase64url(s) {
+  console.log('[encodeBase64url] encoding', s);
+  const i = new Uint8Array([123,34,105,97,116,34,58,49,55,53,50,52,50,53,53,55,57,44,34,101,120,112,34,58,49,55,53,50,52,50,57,49,55,57,44,34,105,115,115,34,58,34,100,105,100,58,110,105,108,58,116,101,115,116,110,101,116,58,110,105,108,108,105,111,110,49,110,109,99,51,108,101,100,100,101,50,102,51,102,110,54,103,51,118,51,106,51,117,101,118,121,117,99,119,106,108,119,101,97,53,119,109,104,97,34,44,34,97,117,100,34,58,34,100,105,100,58,110,105,108,58,116,101,115,116,110,101,116,58,110,105,108,108,105,111,110,49,57,116,48,103,101,102,109,55,112,114,54,120,106,107,113,50,115,106,52,48,102,48,114,115,55,119,122,110,108,100,103,102,103,52,103,117,117,101,34,125]);
+  console.log("[uint8arrays] toString RESULT *****", u8a.toString(i, 'base64url'));
   return bytesToBase64url(u8a.fromString(s));
 }
 function decodeBase64url(s) {
@@ -1977,6 +1986,7 @@ const createJWT = function (payload, {
   canonicalize
 }, header = {}) {
   try {
+    console.log('[createJWT] *************** (1)', payload, issuer, alg, signer, expiresIn, canonicalize);
     if (!signer) throw new Error('missing_signer: No Signer functionality has been configured');
     if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured');
     if (!header.typ) header.typ = 'JWT';
@@ -1998,6 +2008,7 @@ const createJWT = function (payload, {
       ...payload,
       iss: issuer
     };
+    console.log('[createJWT] *************** (2)', fullPayload);
     return createJWS(fullPayload, signer, header, {
       canonicalize
     });
@@ -2023,12 +2034,20 @@ const createJWT = function (payload, {
 const createJWS = function (payload, signer, header = {}, options = {}) {
   try {
     if (!header.alg) header.alg = defaultAlg;
+    console.log('[createJWS] *************** (header)', header);
+    console.log('[createJWS] *************** (payload)', payload);
+    console.log('[createJWS] *************** (options)', options);
     const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize);
     const signingInput = [encodeSection(header, options.canonicalize), encodedPayload].join('.');
+    console.log('[createJWS] *************** (encodedPayload)', encodeSection(payload, options.canonicalize), "***", encodedPayload);
+    console.log('[createJWS] *************** (signingInput)', encodeSection(header, options.canonicalize), "***", signingInput);
     const jwtSigner = SignerAlg(header.alg);
+    console.log('[createJWS] *************** (3)', jwtSigner);
     return Promise.resolve(jwtSigner(signingInput, signer)).then(function (signature) {
       // JWS Compact Serialization
       // https://www.rfc-editor.org/rfc/rfc7515#section-7.1
+      console.log('[createJWS] *************** (4)', signingInput, "***", JSON.stringify(signingInput));
+      console.log('[createJWS] *************** (5)', signature, "***", JSON.stringify(signature));
       return [signingInput, signature].join('.');
     });
   } catch (e) {
@@ -2043,6 +2062,7 @@ const defaultAlg = 'ES256K';
 const DID_JSON = 'application/did+json'; // eslint-disable-next-line @typescript-eslint/no-explicit-any
 
 function encodeSection(data, shouldCanonicalize = false) {
+  console.log('[encodeSection] *************** (0)', encodeBase64url(JSON.stringify(data)), "******", JSON.stringify(data));
   if (shouldCanonicalize) {
     return encodeBase64url(canonicalizeData(data));
   } else {
